//循环代码的出现，就是为了解决代码的复用性
/*
  - for循环的语法机制以及运行原理？
    * 语法机制
      for(初始化表达式：布尔表达式；更新表达式){
          循环体；//循环体由java语句构成
        }
      ！！：初始化表达式最先执行，并且在整个循环中只执行一次
           条件表达式结果必须是一个布尔类型，也就是true和false

    * 执行原理：
      先执行初始化表达式，并且只执行一次
      然后判断条件表达式的结果，如果条件表达式的结果为true，则执行循环体
      循环体结束之后，执行更新表达式
      更新完之后，再判断条件表达式的结果，如果还是true，继续执行循环体
      。。。
      直到更新表达式执行结束之后，再次判断条件时，条件为false，for循环终止

    * 更新表达式的作用是，控制循环的次数，使条件表达式的结果有可能从true变成false，从而
      终止for循环的执行，如果缺失更新表达式，很有可能会导致死循环
*/

public class For01{
  public static void main(String[] args){
    //要求，在控制台上输出100个200
    /*
    for(int i =0;i<100;i++){
      System.out.println(200);
    }
    */

    //最简练的for循环怎么写？
    //初始化表达式、条件表达式、更新表达式其实都不是必须的
    /*
    for(;;){
      System.out.println("死循环");
    }
    */

    //最常见的for循环
    //以下这个for循环，其中int i = 0先执行，并且只执行一次，而且i变量属于for循环的局部变量，
    //for循环结束了之后i的内存就释放了，这个i变量只能在for循环中使用，在main方法中没有办法使用
    for(int i = 0; i<10; i++){
      System.out.println("i=" + i);//0,1,2,3,4,5,6,7,8,9
    }

    //变量i的作用域扩大了
    int i =0;
    for(;i<10;i++){
      System.out.println("i-->" + i);//0,1,2,3,4,5,6,7,8,9
    }
    System.out.println("这里的i可以访问吗？i =" + i);//10

    //变形
    for(int k =1;k<=10;k++){
      System.out.println("k=" + k);//1,2,3...10
    }

    //变形
    for(int k =1;k<=10;){
      System.out.println("k=" + k);//1,2,3...10
      k++;
    }

    //变形
    for(int k=1;k<=10;){
      k++;
      System.out.println("k=" + k);//2,3,4...11
    }
  }
}
