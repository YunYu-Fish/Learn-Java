/*
  - 对于一个java程序来说，如果没有“方法”，会存在什么问题？
    代码无法得到复用
    【可以定义方法，然后需要使用该功能的时候，直接调用以下方法即可，提高代码的复用性】

  - ！！：
    程序开始执行的时候是先执行main方法，因为main方法是一个入口

    在java语言中所有的方法体中的代码都必须遵循自上而下的顺序一次逐行执行

    main方法是不需要程序员手动调用，是由JVM调用的，但是除了main方法之外其他的方法，都需要程序员手动调用，
    方法只有调用的时候才会执行
*/

public class Method01{
  //入口主方法必须要写
  public static void main(String[] args){

    //调用sumInt方法
    //需求1：请编写程序，计算100和200的和
    sumInt(100,200);

    //需求2：请编写程序，计算666和888的和
    sumInt(666,888);

    //需求1：请编写程序，计算100和200的和
    /*
    int x = 100;
    int y = 200;
    int z = x + y;
    System.out.println(x+"+"+y+"="+z);
    */

    /*
    //需求2：请编写程序，计算666和888的和
    //这个需求2实际上和需求1是完全相同的，只不过具体求和时的“数据不同”
    int a = 666;
    int b = 888;
    int c = a + b;
    System.out.println(a+"+"+b+"="+c);
    */

    /*
      需求1和需求2本质上相同，只不过参与运算的数值不同，代码编写了两份，显然代码没有得到重复利用，
      专业术语叫做“复用性”差

      功能/业务逻辑既然相同，为什么要重复编写代码，代码能不能只写一次，以后再次需要使用该业务/需求
      的时候，直接调用就可以了

      如果想达到代码复用，那么需要学习java语言中的方法机制
    */

  }//要在main方法外面，在main上面还是下面没关系，只要在类体当中都行

  //完成需求1，2的方法
  //专门在这个类体当中定义一个方法，这个方法专门用来求和
  //x y z在以下的sumInt方法中都属于局部变量
  //局部变量有一个特点：方法结束之后，局部变量占用的内存会自动释放
  public static void sumInt(int x, int y){
    int z = x + y;
    System.out.println(x+"+"+y+"="+z);
  }
}
